package PV112;

import com.jogamp.opengl.util.Animator;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import javax.media.opengl.GLCapabilities;
import javax.media.opengl.GLProfile;
import javax.media.opengl.awt.GLJPanel;

public class MainWindow extends javax.swing.JFrame implements MouseMotionListener {

    private final GLJPanel glPanel;
    private GLProfile profile = GLProfile.get(GLProfile.GL2);
    private OpenGlListener openGlListener = new OpenGlListener();
    private float x;
    private float y;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        // vytvori sa viditelny panel na ktorom sa bude zobrazovat nas graficky vystup
        glPanel = new GLJPanel(new GLCapabilities(profile));

        // tento panel sa umiestni na halvne okno aplikacie
        add(glPanel);

        // rozmery glPanela sa nastavia tak, aby sa zhodovali s rozmermi hlavneho okna
        glPanel.setSize(getWidth() - getInsets().left - getInsets().right,
                getHeight() - getInsets().top - getInsets().bottom);

        // k glPanelu pripojime OpenGLListener, aby sme mohli reagovat na udalosti
        // generovane tymto panelom
        glPanel.addGLEventListener(openGlListener);
        Animator animator = new Animator(glPanel);
        animator.start();
        addMouseMotionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 816, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 619, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // zmena velkosti okna
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        glPanel.setSize(getWidth() - getInsets().left - getInsets().right,
                getHeight() - getInsets().top - getInsets().bottom);
    }//GEN-LAST:event_formComponentResized

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_LEFT:
                openGlListener.craneR += 1f;
                if (openGlListener.view == 2) {
                    openGlListener.cameraLookVector[0] = -Math.cos((-x / 100f) + openGlListener.craneR / (180f / Math.PI));
                    openGlListener.cameraLookVector[1] = (-y + 330) / 100f;
                    openGlListener.cameraLookVector[2] = Math.sin((-x / 100f) + openGlListener.craneR / (180f / Math.PI));
                }                
                repaint();
                break;
            case KeyEvent.VK_RIGHT:
                openGlListener.craneR -= 1f;
                if (openGlListener.view == 2) {
                    openGlListener.cameraLookVector[0] = -Math.cos((-x / 100f) + openGlListener.craneR / (180f / Math.PI));
                    openGlListener.cameraLookVector[1] = (-y + 330) / 100f;
                    openGlListener.cameraLookVector[2] = Math.sin((-x / 100f) + openGlListener.craneR / (180f / Math.PI));
                }                
                repaint();
                break;
            case KeyEvent.VK_UP:
                if (openGlListener.craneF > -5.5f) {
                    openGlListener.craneF -= 0.1f;
                }                
                repaint();
                break;
            case KeyEvent.VK_DOWN:
                if (openGlListener.craneF < 13) {
                    openGlListener.craneF += 0.1f;
                }                
                repaint();
                break;
            case KeyEvent.VK_NUMPAD8:
                if (openGlListener.craneU < 18.5f) {
                    openGlListener.craneU += 0.1f;
                }                
                repaint();
                break;
            case KeyEvent.VK_NUMPAD2:
                if (openGlListener.craneU > 2.3) {
                    openGlListener.craneU -= 0.1f;
                }                
                repaint();
                break;
            case KeyEvent.VK_V:
                if (openGlListener.view == 2) {
                    openGlListener.view = 0;
                } else {
                    openGlListener.view++;
                }                
                repaint();
                break;
            case KeyEvent.VK_M:
                if (openGlListener.magnetOn) {
                    openGlListener.magnetOn = false;
                    if (openGlListener.carriedBox != null) {
                        openGlListener.carriedBox.pos[0] = (float) openGlListener.magnetPos[0];
                        openGlListener.carriedBox.pos[1] = 0;
                        openGlListener.carriedBox.pos[2] = (float) openGlListener.magnetPos[2];
                        openGlListener.carriedBox = null;
                    }
                } else {
                    openGlListener.magnetOn = true;
                }                
                repaint();
                break;
            case KeyEvent.VK_W:
                openGlListener.cameraPos[0] += openGlListener.cameraLookVector[0] / 3f;
                openGlListener.cameraPos[1] += openGlListener.cameraLookVector[1] / 3f;
                openGlListener.cameraPos[2] += openGlListener.cameraLookVector[2] / 3f;
                repaint();
                break;
            case KeyEvent.VK_S:
                openGlListener.cameraPos[0] -= openGlListener.cameraLookVector[0] / 3f;
                openGlListener.cameraPos[1] -= openGlListener.cameraLookVector[1] / 3f;
                openGlListener.cameraPos[2] -= openGlListener.cameraLookVector[2] / 3f;
                repaint();
                break;
        }
    }//GEN-LAST:event_formKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseDragged(MouseEvent e) {
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        //openGlListener.cameraY += 4*(e.getY() - lastMouseY);
        y = e.getY();
        x = e.getX();
        if (openGlListener.view != 2) {
            openGlListener.cameraLookVector[0] = -Math.sin(x / 100f);
            openGlListener.cameraLookVector[1] = (-y + 330) / 100f;
            openGlListener.cameraLookVector[2] = Math.cos(x / 100f);
        } else {
            openGlListener.cameraLookVector[0] = -Math.cos((-x / 100f) + openGlListener.craneR / (180f / Math.PI));
            openGlListener.cameraLookVector[1] = (-y + 330) / 100f;
            openGlListener.cameraLookVector[2] = Math.sin((-x / 100f) + openGlListener.craneR / (180f / Math.PI));
            //System.out.println(openGlListener.cameraLookVector[0]+" // "+openGlListener.cameraLookVector[2]);
        }
        ;//(x / 100f)
        repaint();
    }
}
